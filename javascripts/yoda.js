// Generated by CoffeeScript 1.8.0
(function() {
  window.YodaSpeak = (function() {
    function YodaSpeak() {}

    YodaSpeak.yodaize = function() {
      YodaSpeak._createVerbsColumn();
      YodaSpeak._mirrorLayout();
      return YodaSpeak._yodaizeText();
    };

    YodaSpeak._mirrorLayout = function() {
      var header, property, traitsColumn, _i, _len, _mirror, _mirrorValue, _ref, _swapProperty;
      _mirror = function(string) {
        if (string.match(/left/)) {
          return string.replace("left", "right");
        }
        if (string.match(/right/)) {
          return string.replace("right", "left");
        }
      };
      _swapProperty = function(el, property) {
        var changes, otherProperty, otherValue, value;
        value = el.css(property);
        otherProperty = _mirror(property);
        otherValue = el.css(otherProperty);
        changes = {};
        changes[property] = otherValue;
        changes[otherProperty] = value;
        return el.css(changes);
      };
      _mirrorValue = function(el, property) {
        var otherValue, value;
        value = el.css(property);
        otherValue = _mirror(value);
        return el.css(property, otherValue);
      };
      header = $("header");
      _swapProperty(header, "left");
      _mirrorValue(header, "text-align");
      _swapProperty($("h1", header), "right");
      _swapProperty($("nav", header), "left");
      traitsColumn = $(".traits.main");
      _ref = ["left", "margin-left", "padding-left"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        _swapProperty(traitsColumn, property);
      }
      return _mirrorValue(traitsColumn, "text-align");
    };

    YodaSpeak._createVerbsColumn = function() {
      var traitsColumn, verbsColumn;
      traitsColumn = $(".traits").first();
      verbsColumn = traitsColumn.clone();
      verbsColumn.addClass("verbs");
      verbsColumn.css({
        "margin-left": "60%",
        "padding-left": "195px",
        "text-align": "left"
      });
      $(document.body).prepend(verbsColumn);
      return traitsColumn.addClass("main");
    };

    YodaSpeak._yodaizeText = function() {
      var index, lastNode, traitEl, traitEls, traitsColumn, verbEl, verbEls, verbsColumn, _i, _len, _results;
      traitsColumn = $(".traits.main");
      verbsColumn = $(".traits.verbs");
      traitEls = $("h2, li", traitsColumn);
      verbEls = $("h2, li", verbsColumn);
      _results = [];
      for (index = _i = 0, _len = traitEls.length; _i < _len; index = ++_i) {
        traitEl = traitEls[index];
        traitEl = $(traitEl);
        verbEl = verbEls.eq(index);
        verbEl.empty().append(traitEl.find("span.verb"));
        traitEl.find("span.name, span.verb").remove();
        lastNode = traitEl.contents().last().get(0);
        if (lastNode.nodeType === 3) {
          lastNode.textContent = lastNode.textContent.replace(/\s+$/, "");
        }
        _results.push(traitEl.append(","));
      }
      return _results;
    };

    return YodaSpeak;

  })();

  $(document).ready(function() {
    var code, keysDown, yodaized;
    yodaized = false;
    code = [38, 38, 40, 40, 37, 39, 37, 39, 66, 65];
    keysDown = [];
    return $(window).on("keydown", function(event) {
      keysDown.push(event.keyCode);
      if (keysDown.length >= code.length && keysDown.slice(keysDown.length - code.length, keysDown.length).join("") === code.join("")) {
        if (yodaized) {
          return window.location.reload();
        } else {
          YodaSpeak.yodaize();
          return yodaized = true;
        }
      }
    });
  });

}).call(this);
